{
	"info": {
		"_postman_id": "7f0dcebc-78b4-49cd-a0e5-3f035a845a65",
		"name": "Invoices adding",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35234470"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"accessToken\", response.access_token);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"customer2@practicesoftwaretesting.com\",\r\n  \"password\": \"welcome01\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Me",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check if response body is not empty\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Check if Content-Type is application/json\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Save user info as a variable\r",
							"pm.collectionVariables.set(\"userId\", pm.response.json().id)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "Bearer {{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/me",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all invoices",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check if response body is not empty\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Check if Content-Type is application/json\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"const data = pm.response.json().data;\r",
							"console.log(`All: ${data.length}`)\r",
							"\r",
							"const invoiceOfId = data.filter((it) => it.user_id == pm.collectionVariables.get(\"userId\"));\r",
							"console.log(`Before adding: ${invoiceOfId.length}`);\r",
							"pm.collectionVariables.set(\"invoiceOfId\", invoiceOfId.length);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "Bearer {{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/invoices",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"invoices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new invoices",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"userId\", pm.collectionVariables.get(\"userId\"));\r",
							"\r",
							"pm.variables.set(\"invoice_items\", JSON.stringify(pm.iterationData.get(\"invoice_items\")));\r",
							"\r",
							"// Helper: set if not already defined\r",
							"function setVar(name, defaultVal) {\r",
							"    if (!pm.variables.get(name) && !pm.iterationData.get(name)) {\r",
							"        pm.variables.set(name, defaultVal);\r",
							"    }\r",
							"}\r",
							"\r",
							"// Set defaults\r",
							"setVar(\"user_id\", pm.collectionVariables.get(\"userId\"));\r",
							"setVar(\"invoiceId\", 8);\r",
							"setVar(\"invoice_items\", \"[]\")\r",
							"setVar(\"billing_address\", \"123 Default St\");\r",
							"setVar(\"billing_city\", \"Default City\");\r",
							"setVar(\"billing_country\", \"Vietnam\");\r",
							"setVar(\"billing_state\", \"HCMC\");\r",
							"setVar(\"billing_postcode\", \"default postcode\");\r",
							"setVar(\"total\", 0);\r",
							"setVar(\"payment_method\", \"Cash on Delivery\");\r",
							"setVar(\"payment_account_name\", \"John Doe\");\r",
							"setVar(\"payment_account_number\", \"0000000000\");\r",
							"setVar(\"product_id\", 9);\r",
							"setVar(\"quantity\", 1);\r",
							"setVar(\"unit_price\", 12.01);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "Bearer {{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_id\": {{userId}},\r\n    \"id\": {{invoiceId}},\r\n    \"billing_address\": \"dummy\",\r\n    \"billing_city\": \"dummy\",\r\n    \"billing_country\": \"dummy\",\r\n    \"billing_state\": \"dummy\",\r\n    \"billing_postcode\": \"dummy\",\r\n    \"total\": {{total}},\r\n    \"payment_method\": \"Cash on Delivery\",\r\n    \"payment_account_name\": \"Jogn Doe\",\r\n    \"payment_account_number\": \"0987654345\",\r\n    \"invoice_items\": {{invoice_items}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/invoices",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"invoices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all invoices after adding",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check if response body is not empty\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Check if Content-Type is application/json\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"const data = pm.response.json().data;\r",
							"console.log(`All: ${data.length}`)\r",
							"\r",
							"const invoiceOfId = data.filter((it) => it.user_id == pm.collectionVariables.get(\"userId\"));\r",
							"const oldInvoiceAmount = pm.collectionVariables.get(\"invoiceOfId\");\r",
							"\r",
							"pm.test(\"Invoice amount must be the same\", function () {\r",
							"    pm.expect(oldInvoiceAmount).to.eql(invoiceOfId.length);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "Bearer {{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/invoices",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"invoices"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api-with-bugs.practicesoftwaretesting.com",
			"type": "default"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "invoiceOfId",
			"value": ""
		}
	]
}